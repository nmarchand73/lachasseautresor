"""
Main entry point for La Chasse au Tr√©sor book generator
"""
import click
import os
import sys
from pathlib import Path
from dotenv import load_dotenv
from rich.console import Console
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.table import Table
from rich.panel import Panel
from rich.prompt import Prompt, Confirm, IntPrompt
from rich import print as rprint
import json
from typing import Optional, Dict, Any

# Add src to path for imports
sys.path.insert(0, str(Path(__file__).parent.parent))

from src.simple_generator import SimpleChasseTresorGenerator
from src.utils import FileHandler

# Load environment variables
load_dotenv()

# Initialize Rich console
console = Console()


def collect_adventure_info() -> Dict[str, Any]:
    """
    Collecte interactivement les informations sur l'aventure
    """
    console.print(Panel.fit(
        "[bold cyan]üéØ CONFIGURATION DE L'AVENTURE[/bold cyan]\n"
        "[yellow]Cr√©ons ensemble votre livre d'aventure personnalis√©![/yellow]",
        border_style="cyan"
    ))
    
    # Suggestions de th√®mes par r√©gion
    theme_suggestions = {
        "√âgypte": ["Les Myst√®res des Pyramides", "Les Secrets du Nil", "Les Tr√©sors de Pharaon"],
        "France": ["Les Ch√¢teaux de la Loire", "Les Myst√®res du Mont-Saint-Michel", "Les Secrets de Versailles"],
        "Gr√®ce": ["Les Myst√®res de l'Olympe", "Les Secrets de Delphes", "L'Atlantide Retrouv√©e"],
        "P√©rou": ["Les Tr√©sors des Incas", "Le Myst√®re de Machu Picchu", "L'Or du P√©rou"],
        "√âgypte antique": ["Les Myst√®res d'√âgypte", "Les Pharaons Perdus", "Les Gardiens du Sphinx"],
        "Cambodge": ["Les Secrets d'Angkor", "Les Temples Perdus", "L'Empire Khmer"],
        "Jordanie": ["Les Tr√©sors de Petra", "Les Myst√®res Nabat√©ens", "La Cit√© Rose"],
        "Tibet": ["Les Monast√®res Secrets", "Le Toit du Monde", "Les Sages de l'Himalaya"],
        "Autre": []
    }
    
    console.print("\n[bold yellow]üìç √âTAPE 1 : Choisissez votre destination[/bold yellow]")
    countries = list(theme_suggestions.keys())
    
    console.print("\nDestinations disponibles :")
    for i, country in enumerate(countries, 1):
        if country != "Autre":
            console.print(f"  [cyan]{i}.[/cyan] {country}")
        else:
            console.print(f"  [cyan]{i}.[/cyan] Autre destination (√† pr√©ciser)")
    
    while True:
        try:
            choice = IntPrompt.ask(
                f"\nChoisissez votre destination (1-{len(countries)})",
                default=1
            )
            if 1 <= choice <= len(countries):
                selected_country = countries[choice - 1]
                break
            else:
                console.print("[red]‚ùå Choix invalide. Veuillez r√©essayer.[/red]")
        except:
            console.print("[red]‚ùå Veuillez entrer un num√©ro valide.[/red]")
    
    # Si "Autre", demander le pays
    if selected_country == "Autre":
        selected_country = Prompt.ask(
            "[yellow]Pr√©cisez votre destination",
            default="Myst√©rieuse contr√©e lointaine"
        )
    
    console.print(f"\n[green]‚úÖ Destination s√©lectionn√©e : {selected_country}[/green]")
    
    # Choix du th√®me
    console.print(f"\n[bold yellow]üé≠ √âTAPE 2 : Choisissez votre th√®me d'aventure[/bold yellow]")
    
    original_country = selected_country if selected_country in theme_suggestions else "Autre"
    suggestions = theme_suggestions.get(original_country, [])
    
    if suggestions:
        console.print(f"\nTh√®mes sugg√©r√©s pour {selected_country} :")
        for i, theme in enumerate(suggestions, 1):
            console.print(f"  [cyan]{i}.[/cyan] {theme}")
        console.print(f"  [cyan]{len(suggestions)+1}.[/cyan] Th√®me personnalis√©")
        
        while True:
            try:
                theme_choice = IntPrompt.ask(
                    f"\nChoisissez un th√®me (1-{len(suggestions)+1})",
                    default=1
                )
                if 1 <= theme_choice <= len(suggestions):
                    selected_theme = suggestions[theme_choice - 1]
                    break
                elif theme_choice == len(suggestions) + 1:
                    selected_theme = Prompt.ask(
                        "[yellow]Pr√©cisez votre th√®me personnalis√©",
                        default=f"Les Myst√®res de {selected_country}"
                    )
                    break
                else:
                    console.print("[red]‚ùå Choix invalide. Veuillez r√©essayer.[/red]")
            except:
                console.print("[red]‚ùå Veuillez entrer un num√©ro valide.[/red]")
    else:
        selected_theme = Prompt.ask(
            f"[yellow]Quel th√®me pour votre aventure en {selected_country} ?",
            default=f"Les Myst√®res de {selected_country}"
        )
    
    console.print(f"[green]‚úÖ Th√®me s√©lectionn√© : {selected_theme}[/green]")
    
    # Choix du nombre de paragraphes
    console.print(f"\n[bold yellow]üìñ √âTAPE 3 : Longueur de votre livre[/bold yellow]")
    console.print("""
Modes disponibles :
  [cyan]1.[/cyan] üß™ Test rapide (3-5 paragraphes) - Pour d√©couvrir rapidement
  [cyan]2.[/cyan] üèÉ Aventure courte (10-20 paragraphes) - Lecture d'1 heure  
  [cyan]3.[/cyan] üìñ Aventure standard (30-50 paragraphes) - Format √©quilibr√©
  [cyan]4.[/cyan] üìö Livre complet (95 paragraphes) - Format Golden Bullets authentique
  [cyan]5.[/cyan] üéØ Nombre personnalis√©
""")
    
    length_options = {
        1: ("Test rapide", 5),
        2: ("Aventure courte", 15),
        3: ("Aventure standard", 35),
        4: ("Livre complet", 95),
        5: ("Personnalis√©", None)
    }
    
    while True:
        try:
            length_choice = IntPrompt.ask("Choisissez la longueur (1-5)", default=2)
            if length_choice in length_options:
                length_name, sections = length_options[length_choice]
                if sections is None:
                    sections = IntPrompt.ask(
                        "Nombre de paragraphes souhait√© (1-200)",
                        default=30
                    )
                    if not 1 <= sections <= 200:
                        console.print("[red]‚ùå Le nombre doit √™tre entre 1 et 200.[/red]")
                        continue
                    length_name = f"Personnalis√© ({sections} paragraphes)"
                break
            else:
                console.print("[red]‚ùå Choix invalide. Veuillez r√©essayer.[/red]")
        except:
            console.print("[red]‚ùå Veuillez entrer un num√©ro valide.[/red]")
    
    console.print(f"[green]‚úÖ Longueur s√©lectionn√©e : {length_name}[/green]")
    
    # Mode de g√©n√©ration
    console.print(f"\n[bold yellow]‚ö° √âTAPE 4 : Mode de g√©n√©ration[/bold yellow]")
    is_test = sections <= 10
    
    if is_test:
        console.print("[yellow]Mode test automatiquement s√©lectionn√© (‚â§10 paragraphes)[/yellow]")
    else:
        use_test = Confirm.ask(
            "Utiliser le mode test pour une g√©n√©ration plus rapide ?",
            default=False
        )
        is_test = use_test
    
    # R√©sum√© final
    console.print(Panel.fit(
        f"[bold green]üéØ CONFIGURATION TERMIN√âE[/bold green]\n\n"
        f"[cyan]Destination :[/cyan] {selected_country}\n"
        f"[cyan]Th√®me :[/cyan] {selected_theme}\n"  
        f"[cyan]Paragraphes :[/cyan] {sections}\n"
        f"[cyan]Mode :[/cyan] {'Test (rapide)' if is_test else 'Standard (d√©taill√©)'}",
        border_style="green"
    ))
    
    if not Confirm.ask("\n[yellow]Confirmer et commencer la g√©n√©ration ?[/yellow]", default=True):
        console.print("[red]‚ùå G√©n√©ration annul√©e[/red]")
        return None
    
    return {
        "country": selected_country,
        "theme": selected_theme,
        "sections": sections,
        "test_mode": is_test
    }


@click.group()
def cli():
    """
    üéØ LA CHASSE AU TR√âSOR - G√©n√©rateur de Livres d'Aventure
    
    Syst√®me bas√© sur CrewAI pour g√©n√©rer des livres d'aventure interactifs
    inspir√©s de l'√©mission culte des ann√©es 80.
    """
    pass


@cli.command()
@click.option('--output', '-o', default='output', help='R√©pertoire de sortie')
def create(output: str):
    """
    Mode interactif : cr√©er un livre d'aventure personnalis√©
    """
    console.print(Panel.fit(
        "[bold magenta]üé≠ CR√âATION INTERACTIVE[/bold magenta]\n"
        "[white]Bienvenue dans l'aventure de La Chasse au Tr√©sor ![/white]",
        border_style="magenta"
    ))
    
    # Check API key
    if not os.getenv("OPENAI_API_KEY"):
        console.print("[bold red]‚ùå Erreur: OPENAI_API_KEY non configur√©e[/bold red]")
        console.print("Veuillez configurer votre cl√© API dans le fichier .env")
        return 1
    
    # Collecte interactive des informations
    adventure_info = collect_adventure_info()
    if not adventure_info:
        return 0
    
    try:
        generator = SimpleChasseTresorGenerator()
        
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console
        ) as progress:
            task = progress.add_task(
                f"[green]G√©n√©ration de {adventure_info['sections']} paragraphes...", 
                total=None
            )
            
            # G√©n√©rer le livre avec les param√®tres interactifs
            book_data = generator.generate_test_book(
                adventure_info['theme'], 
                adventure_info['sections']
            )
            
            # Ajouter les informations de pays dans les m√©tadonn√©es
            book_data['country'] = adventure_info['country']
            book_data['generation_mode'] = 'Test rapide' if adventure_info['test_mode'] else 'Standard'
            
            saved_files = generator.save_to_files(book_data, output)
            progress.update(task, completed=100)
        
        # Affichage des r√©sultats
        console.print(f"\n[bold green]‚úÖ Livre d'aventure cr√©√© avec succ√®s ![/bold green]")
        
        table = Table(title="üìö Votre Livre d'Aventure", border_style="green")
        table.add_column("Propri√©t√©", style="cyan")
        table.add_column("Valeur", style="yellow")
        
        table.add_row("Destination", adventure_info['country'])
        table.add_row("Th√®me", adventure_info['theme'])
        table.add_row("Paragraphes", str(adventure_info['sections']))
        table.add_row("Mode", adventure_info.get('generation_mode', 'Standard'))
        table.add_row("ID", book_data["id"])
        
        for fmt, filepath in saved_files.items():
            table.add_row(f"Fichier {fmt.upper()}", Path(filepath).name)
        
        console.print(table)
        console.print(f"\n[green]üìÅ Fichiers sauvegard√©s dans: {output}/[/green]")
        
        # Offrir la possibilit√© de cr√©er un autre livre
        if Confirm.ask("\n[cyan]Cr√©er un autre livre d'aventure ?[/cyan]", default=False):
            return create.callback(output)
        
    except Exception as e:
        console.print(f"[bold red]‚ùå Erreur: {str(e)}[/bold red]")
        return 1
    
    return 0


@cli.command()
@click.option(
    '--theme',
    '-t',
    help='Th√®me pour l\'aventure (mode interactif si non sp√©cifi√©)'
)
@click.option(
    '--sections',
    '-s',
    type=click.IntRange(1, 200),
    help='Nombre de sections/paragraphes (3=test rapide, 95=Golden Bullets standard, 200=maximum)'
)
@click.option(
    '--output',
    '-o',
    default='output',
    help='R√©pertoire de sortie'
)
@click.option(
    '--interactive',
    '-i',
    is_flag=True,
    help='Activer le mode interactif pour choisir th√®me et pays'
)
def generate(theme: str, sections: int, output: str, interactive: bool):
    """
    G√©n√©rer un livre d'aventure avec nombre de paragraphes personnalisable
    """
    # Si mode interactif demand√© ou si pas de th√®me fourni, utiliser le questionnaire
    if interactive or not theme:
        adventure_info = collect_adventure_info()
        if not adventure_info:
            return 0
        
        theme = adventure_info['theme']
        sections = adventure_info['sections'] if not sections else sections
        country = adventure_info['country']
    else:
        # Valeurs par d√©faut si non interactif
        if not sections:
            sections = 95
        country = "Destination myst√©rieuse"
    
    # Affichage du mode en fonction du nombre de sections
    if sections <= 5:
        mode = "üß™ MODE TEST"
        color = "yellow"
        advice = "Parfait pour des tests rapides"
    elif sections <= 20:
        mode = "üèÉ MODE COURT"
        color = "blue" 
        advice = "Livre d'aventure court et dynamique"
    elif sections <= 95:
        mode = "üìñ MODE STANDARD"
        color = "green"
        advice = "Livre d'aventure de taille moyenne"
    else:
        mode = "üìö MODE GOLDEN BULLETS"
        color = "cyan"
        advice = "Format officiel avec 95+ paragraphes"
    
    if not interactive and theme:
        console.print(Panel.fit(
            f"[bold {color}]{mode}[/bold {color}]\n"
            f"[white]{advice}[/white]\n"
            f"[yellow]{sections} paragraphes √† g√©n√©rer[/yellow]",
            border_style=color
        ))
    
    # Check API key
    if not os.getenv("OPENAI_API_KEY"):
        console.print("[bold red]‚ùå Erreur: OPENAI_API_KEY non configur√©e[/bold red]")
        console.print("Veuillez configurer votre cl√© API dans le fichier .env")
        return 1
    
    try:
        generator = SimpleChasseTresorGenerator()
        
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console
        ) as progress:
            task = progress.add_task(f"[green]G√©n√©ration de {sections} sections...", total=None)
            
            book_data = generator.generate_test_book(theme, sections)
            saved_files = generator.save_to_files(book_data, output)
            
            progress.update(task, completed=100)
        
        console.print(f"\n[bold green]‚úÖ Livre de {sections} paragraphes g√©n√©r√© ![/bold green]")
        
        # Display results
        table = Table(title="üìö Livre G√©n√©r√©", border_style="green")
        table.add_column("Propri√©t√©", style="cyan")
        table.add_column("Valeur", style="yellow")
        
        table.add_row("Destination", country if 'country' in locals() else "Non sp√©cifi√©e")
        table.add_row("Th√®me", theme)
        table.add_row("Paragraphes", str(sections))
        table.add_row("ID", book_data["id"])
        
        for fmt, filepath in saved_files.items():
            table.add_row(f"Fichier {fmt.upper()}", Path(filepath).name)
        
        console.print(table)
        console.print(f"\n[green]üìÅ Fichiers sauvegard√©s dans: {output}/[/green]")
        
    except Exception as e:
        console.print(f"[bold red]‚ùå Erreur: {str(e)}[/bold red]")
        return 1
    
    return 0


@cli.command()
@click.argument('filepath', type=click.Path(exists=True))
def validate(filepath: str):
    """
    Valider un livre g√©n√©r√© (validation basique)
    """
    console.print(Panel.fit(
        "[bold cyan]üîç VALIDATION DE LIVRE[/bold cyan]",
        border_style="cyan"
    ))
    
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            book_data = json.load(f)
        
        title = book_data.get('title', 'Titre inconnu')
        sections = book_data.get('total_sections', 0)
        content = book_data.get('content', {})
        
        console.print(f"[green]üìñ Livre: {title}[/green]")
        console.print(f"[green]üìä Sections d√©clar√©es: {sections}[/green]")
        
        # Basic validation
        issues = []
        
        # Check structure
        if 'title' not in content:
            issues.append("Section 'title' manquante")
        if 'intro' not in content:
            issues.append("Section 'intro' manquante")
        
        # Count actual sections
        actual_sections = len([k for k in content.keys() if k.isdigit()])
        if actual_sections != sections:
            issues.append(f"Sections r√©elles ({actual_sections}) != d√©clar√©es ({sections})")
        
        # Check format
        for key, section in content.items():
            if key.isdigit():
                if 'text' not in section:
                    issues.append(f"Section {key}: texte manquant")
                if 'choices' not in section:
                    issues.append(f"Section {key}: choix manquants")
        
        # Results
        if issues:
            console.print(f"\n[yellow]‚ö†Ô∏è {len(issues)} probl√®me(s) d√©tect√©(s):[/yellow]")
            for issue in issues:
                console.print(f"  ‚Ä¢ {issue}")
        else:
            console.print("\n[green]‚úÖ Livre valide - Aucun probl√®me d√©tect√©[/green]")
        
        console.print(f"\n[cyan]üìä R√©sum√©:[/cyan]")
        console.print(f"  ‚Ä¢ Titre: {title}")
        console.print(f"  ‚Ä¢ Sections: {actual_sections}")
        console.print(f"  ‚Ä¢ Fichier: {Path(filepath).name}")
        
    except Exception as e:
        console.print(f"[bold red]‚ùå Erreur: {str(e)}[/bold red]")
        return 1
    
    return 0


@cli.command()
@click.option('--dir', '-d', default='output', help='R√©pertoire des livres')
def list_books(dir: str):
    """
    Lister tous les livres g√©n√©r√©s
    """
    console.print(Panel.fit(
        "[bold cyan]üìö LIVRES G√âN√âR√âS[/bold cyan]",
        border_style="cyan"
    ))
    
    try:
        file_handler = FileHandler(dir)
        books = file_handler.list_books()
        
        if not books:
            console.print("[yellow]Aucun livre trouv√©[/yellow]")
            return
        
        table = Table(title=f"Livres dans {dir}/books", border_style="cyan")
        table.add_column("#", style="dim")
        table.add_column("Fichier", style="cyan")
        table.add_column("Taille", style="yellow")
        table.add_column("Cr√©√© le", style="green")
        
        for i, book in enumerate(books, 1):
            table.add_row(
                str(i),
                book["filename"],
                book["size"],
                book["created"]
            )
        
        console.print(table)
        console.print(f"\n[green]Total: {len(books)} livre(s)[/green]")
    
    except Exception as e:
        console.print(f"[bold red]‚ùå Erreur: {str(e)}[/bold red]")
        return 1
    
    return 0


@cli.command()
@click.option('--days', '-d', default=30, help='Nombre de jours √† conserver')
@click.option('--dir', default='output', help='R√©pertoire √† nettoyer')
@click.confirmation_option(prompt='√ätes-vous s√ªr de vouloir nettoyer les anciens fichiers?')
def clean(days: int, dir: str):
    """
    Nettoyer les anciens fichiers g√©n√©r√©s
    """
    console.print(Panel.fit(
        "[bold yellow]üóëÔ∏è NETTOYAGE[/bold yellow]",
        border_style="yellow"
    ))
    
    try:
        file_handler = FileHandler(dir)
        deleted = file_handler.clean_old_files(days)
        
        if deleted > 0:
            console.print(f"[green]‚úÖ {deleted} fichier(s) supprim√©(s)[/green]")
        else:
            console.print("[yellow]Aucun fichier √† supprimer[/yellow]")
    
    except Exception as e:
        console.print(f"[bold red]‚ùå Erreur: {str(e)}[/bold red]")
        return 1
    
    return 0


@cli.command()
@click.option(
    '--theme',
    '-t',
    default="Les Myst√®res d'√âgypte",
    help='Th√®me pour le test (d√©faut: "Les Myst√®res d\'√âgypte")'
)
@click.option(
    '--sections',
    '-s',
    default=3,
    type=click.IntRange(1, 50),
    help='Nombre de sections/paragraphes √† g√©n√©rer pour le test (d√©faut: 3, max recommand√©: 10)'
)
@click.option(
    '--output',
    '-o',
    default='output',
    help='R√©pertoire de sortie'
)
def test(theme: str, sections: int, output: str):
    """
    Mode test : g√©n√®re un livre d'aventure simplifi√© avec peu de sections
    """
    console.print(Panel.fit(
        "[bold green]üß™ MODE TEST[/bold green]\n"
        "[yellow]G√©n√©ration simplifi√©e pour tests rapides[/yellow]",
        border_style="green"
    ))
    
    # Check API key
    if not os.getenv("OPENAI_API_KEY"):
        console.print("[bold red]‚ùå Erreur: OPENAI_API_KEY non configur√©e[/bold red]")
        console.print("Veuillez configurer votre cl√© API dans le fichier .env")
        return
    
    try:
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console
        ) as progress:
            
            task = progress.add_task(f"[green]G√©n√©ration de {sections} sections...", total=None)
            
            # Initialize simple generator
            generator = SimpleChasseTresorGenerator()
            
            # Generate test book
            book_data = generator.generate_test_book(theme, sections)
            
            # Save to files
            saved_files = generator.save_to_files(book_data, output)
            
            progress.update(task, completed=100)
        
        # Display results
        console.print("\n[bold green]‚úÖ G√©n√©ration de test termin√©e ![/bold green]")
        
        table = Table(title="üìö Livre de Test G√©n√©r√©", border_style="green")
        table.add_column("Propri√©t√©", style="cyan")
        table.add_column("Valeur", style="yellow")
        
        table.add_row("Th√®me", theme)
        table.add_row("Sections g√©n√©r√©es", str(sections))
        table.add_row("Mode", "Test (simplifi√©)")
        
        for fmt, filepath in saved_files.items():
            table.add_row(f"Fichier {fmt.upper()}", Path(filepath).name)
        
        console.print(table)
        
        # Show preview of markdown if available
        if "markdown" in saved_files:
            console.print(f"\n[green]üìÑ Aper√ßu du fichier Markdown:[/green]")
            with open(saved_files["markdown"], 'r', encoding='utf-8') as f:
                content = f.read()
                preview = content[:1000] + "..." if len(content) > 1000 else content
            console.print(f"[dim]{preview}[/dim]")
        
        console.print(f"\n[green]üìÅ Fichiers sauvegard√©s dans: {output}/[/green]")
        
    except Exception as e:
        console.print(f"[bold red]‚ùå Erreur lors de la g√©n√©ration de test: {str(e)}[/bold red]")
        console.print_exception()
        return 1
    
    return 0


@cli.command()
@click.argument('filepath', type=click.Path(exists=True))
@click.option('--sections', '-s', default=3, help='Nombre de sections √† afficher (d√©faut: 3)')
def preview(filepath: str, sections: int):
    """
    Pr√©visualiser un livre en format Markdown
    """
    console.print(Panel.fit(
        "[bold cyan]üëÅÔ∏è PR√âVISUALISATION MARKDOWN[/bold cyan]",
        border_style="cyan"
    ))
    
    try:
        # Load the book (format simplifi√© - pas de JSON)
        console.print("[yellow]üìù Fonction de pr√©visualisation temporairement d√©sactiv√©e[/yellow]")
        console.print(f"[cyan]üìÑ Fichier √† pr√©visualiser: {Path(filepath).name}[/cyan]")
        return 0
        
        # Simple preview
        title = book_data.get('title', 'Titre inconnu')
        total_sections = book_data.get('total_sections', 0)
        content = book_data.get('content', {})
        
        console.print(f"[green]üìñ {title}[/green]")
        console.print(f"[cyan]üìä Sections: {total_sections}[/cyan]\n")
        
        # Show intro
        if 'intro' in content:
            console.print("[bold yellow]## Introduction[/bold yellow]")
            intro_text = content['intro'].get('text', '')[:500]
            console.print(f"{intro_text}...\n")
        
        # Show first sections
        console.print(f"[bold yellow]## Premi√®res {min(sections, total_sections)} sections:[/bold yellow]")
        for i in range(1, min(sections + 1, total_sections + 1)):
            if str(i) in content:
                section = content[str(i)]
                text = section.get('text', '')
                
                # Extract title
                lines = text.split('\n')
                title_line = "Section inconnue"
                for line in lines:
                    if line.startswith('- '):
                        title_line = line[2:].strip()
                        break
                
                console.print(f"[cyan]Section {i}: {title_line}[/cyan]")
                
                # Show first 200 chars
                preview_text = text[:200].replace('\n', ' ') + "..."
                console.print(f"[dim]{preview_text}[/dim]\n")
        
        console.print(f"[dim]Pr√©visualisation limit√©e. Fichier complet: {Path(filepath).name}[/dim]")
        
    except Exception as e:
        console.print(f"[bold red]‚ùå Erreur lors de la pr√©visualisation: {str(e)}[/bold red]")
        return 1
    
    return 0


@cli.command()
def info():
    """
    Afficher les informations sur le syst√®me
    """
    console.print(Panel.fit(
        "[bold cyan]‚ÑπÔ∏è INFORMATIONS SYST√àME[/bold cyan]",
        border_style="cyan"
    ))
    
    table = Table(border_style="cyan")
    table.add_column("Param√®tre", style="cyan")
    table.add_column("Valeur", style="yellow")
    
    # Check environment
    api_key = os.getenv("OPENAI_API_KEY")
    table.add_row("API Key OpenAI", "‚úÖ Configur√©e" if api_key else "‚ùå Non configur√©e")
    table.add_row("Mod√®le", os.getenv("OPENAI_MODEL_NAME", "gpt-4-turbo-preview"))
    table.add_row("Temp√©rature", os.getenv("TEMPERATURE", "0.7"))
    table.add_row("Max Tokens", os.getenv("MAX_TOKENS", "2000"))
    
    # CrewAI settings
    table.add_row("CrewAI Verbose", os.getenv("CREW_VERBOSE", "true"))
    table.add_row("CrewAI Memory", os.getenv("CREW_MEMORY", "true"))
    table.add_row("CrewAI Max Iter", os.getenv("CREW_MAX_ITER", "50"))
    
    # Output settings
    table.add_row("R√©pertoire de sortie", os.getenv("OUTPUT_DIR", "output"))
    
    console.print(table)
    
    # Instructions
    if not api_key:
        console.print("\n[yellow]‚ö†Ô∏è Pour configurer votre cl√© API:[/yellow]")
        console.print("1. Copiez .env.example vers .env")
        console.print("2. Ajoutez votre cl√© OpenAI dans OPENAI_API_KEY")
        console.print("3. Relancez la commande")


if __name__ == "__main__":
    cli()