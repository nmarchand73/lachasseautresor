"""
Main entry point for La Chasse au Tr√©sor book generator
"""
import click
import os
import sys
import signal
from pathlib import Path
from dotenv import load_dotenv
from rich.console import Console
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.table import Table
from rich.panel import Panel
from rich.prompt import Prompt, Confirm, IntPrompt
from rich import print as rprint
import json
from typing import Optional, Dict, Any

# Add src to path for imports
sys.path.insert(0, str(Path(__file__).parent.parent))

from src.simple_generator import SimpleChasseTresorGenerator

# Load environment variables
load_dotenv()

# Initialize Rich console
console = Console()

# Import CrewAI generator with fallback
try:
    from src.crewai_generator_v2 import ChasseTresorCrewGeneratorV2 as ChasseTresorCrewGenerator
    CREWAI_AVAILABLE = True
except ImportError as e:
    CREWAI_AVAILABLE = False
    # Silent fallback - will be shown in info command

# Global flag for handling interruption
interrupted = False

def signal_handler(signum, frame):
    """Handle CTRL+C interruption"""
    global interrupted
    interrupted = True
    console.print("\n[yellow]‚ö†Ô∏è Interruption d√©tect√©e... Arr√™t en cours...[/yellow]")
    raise KeyboardInterrupt("Processus interrompu par l'utilisateur")

# Set up signal handler for CTRL+C
signal.signal(signal.SIGINT, signal_handler)


def collect_adventure_info() -> Dict[str, Any]:
    """
    Collecte interactivement les informations sur l'aventure
    """
    console.print(Panel.fit(
        "[bold cyan]üéØ CONFIGURATION DE L'AVENTURE[/bold cyan]\n"
        "[yellow]Cr√©ons ensemble votre livre d'aventure personnalis√©![/yellow]",
        border_style="cyan"
    ))
    
    # Suggestions de th√®mes par r√©gion
    theme_suggestions = {
        "√âgypte": ["Les Myst√®res des Pyramides", "Les Secrets du Nil", "Les Tr√©sors de Pharaon"],
        "France": ["Les Ch√¢teaux de la Loire", "Les Myst√®res du Mont-Saint-Michel", "Les Secrets de Versailles"],
        "Gr√®ce": ["Les Myst√®res de l'Olympe", "Les Secrets de Delphes", "L'Atlantide Retrouv√©e"],
        "P√©rou": ["Les Tr√©sors des Incas", "Le Myst√®re de Machu Picchu", "L'Or du P√©rou"],
        "√âgypte antique": ["Les Myst√®res d'√âgypte", "Les Pharaons Perdus", "Les Gardiens du Sphinx"],
        "Cambodge": ["Les Secrets d'Angkor", "Les Temples Perdus", "L'Empire Khmer"],
        "Jordanie": ["Les Tr√©sors de Petra", "Les Myst√®res Nabat√©ens", "La Cit√© Rose"],
        "Tibet": ["Les Monast√®res Secrets", "Le Toit du Monde", "Les Sages de l'Himalaya"],
        "Autre": []
    }
    
    console.print("\n[bold yellow]üìç √âTAPE 1 : Choisissez votre destination[/bold yellow]")
    countries = list(theme_suggestions.keys())
    
    console.print("\nDestinations disponibles :")
    for i, country in enumerate(countries, 1):
        if country != "Autre":
            console.print(f"  [cyan]{i}.[/cyan] {country}")
        else:
            console.print(f"  [cyan]{i}.[/cyan] Autre destination (√† pr√©ciser)")
    
    while True:
        try:
            choice = IntPrompt.ask(
                f"\nChoisissez votre destination (1-{len(countries)})",
                default=1
            )
            if 1 <= choice <= len(countries):
                selected_country = countries[choice - 1]
                break
            else:
                console.print("[red]‚ùå Choix invalide. Veuillez r√©essayer.[/red]")
        except:
            console.print("[red]‚ùå Veuillez entrer un num√©ro valide.[/red]")
    
    # Si "Autre", demander le pays
    if selected_country == "Autre":
        selected_country = Prompt.ask(
            "[yellow]Pr√©cisez votre destination",
            default="Myst√©rieuse contr√©e lointaine"
        )
    
    console.print(f"\n[green]‚úÖ Destination s√©lectionn√©e : {selected_country}[/green]")
    
    # Choix du th√®me
    console.print(f"\n[bold yellow]üé≠ √âTAPE 2 : Choisissez votre th√®me d'aventure[/bold yellow]")
    
    original_country = selected_country if selected_country in theme_suggestions else "Autre"
    suggestions = theme_suggestions.get(original_country, [])
    
    if suggestions:
        console.print(f"\nTh√®mes sugg√©r√©s pour {selected_country} :")
        for i, theme in enumerate(suggestions, 1):
            console.print(f"  [cyan]{i}.[/cyan] {theme}")
        console.print(f"  [cyan]{len(suggestions)+1}.[/cyan] Th√®me personnalis√©")
        
        while True:
            try:
                theme_choice = IntPrompt.ask(
                    f"\nChoisissez un th√®me (1-{len(suggestions)+1})",
                    default=1
                )
                if 1 <= theme_choice <= len(suggestions):
                    selected_theme = suggestions[theme_choice - 1]
                    break
                elif theme_choice == len(suggestions) + 1:
                    selected_theme = Prompt.ask(
                        "[yellow]Pr√©cisez votre th√®me personnalis√©",
                        default=f"Les Myst√®res de {selected_country}"
                    )
                    break
                else:
                    console.print("[red]‚ùå Choix invalide. Veuillez r√©essayer.[/red]")
            except:
                console.print("[red]‚ùå Veuillez entrer un num√©ro valide.[/red]")
    else:
        selected_theme = Prompt.ask(
            f"[yellow]Quel th√®me pour votre aventure en {selected_country} ?",
            default=f"Les Myst√®res de {selected_country}"
        )
    
    console.print(f"[green]‚úÖ Th√®me s√©lectionn√© : {selected_theme}[/green]")
    
    # Choix du nombre de paragraphes
    console.print(f"\n[bold yellow]üìñ √âTAPE 3 : Longueur de votre livre[/bold yellow]")
    console.print("""
Modes disponibles :
  [cyan]1.[/cyan] üèÉ Aventure courte (10-20 paragraphes) - Lecture d'1 heure  
  [cyan]2.[/cyan] üìñ Aventure standard (30-50 paragraphes) - Format √©quilibr√©
  [cyan]3.[/cyan] üìö Livre complet (95 paragraphes) - Format Golden Bullets authentique
  [cyan]4.[/cyan] üéØ Nombre personnalis√©
""")
    
    length_options = {
        1: ("Aventure courte", 15),
        2: ("Aventure standard", 35),
        3: ("Livre complet", 95),
        4: ("Personnalis√©", None)
    }
    
    while True:
        try:
            length_choice = IntPrompt.ask("Choisissez la longueur (1-4)", default=2)
            if length_choice in length_options:
                length_name, sections = length_options[length_choice]
                if sections is None:
                    sections = IntPrompt.ask(
                        "Nombre de paragraphes souhait√© (1-200)",
                        default=30
                    )
                    if not 1 <= sections <= 200:
                        console.print("[red]‚ùå Le nombre doit √™tre entre 1 et 200.[/red]")
                        continue
                    length_name = f"Personnalis√© ({sections} paragraphes)"
                break
            else:
                console.print("[red]‚ùå Choix invalide. Veuillez r√©essayer.[/red]")
        except:
            console.print("[red]‚ùå Veuillez entrer un num√©ro valide.[/red]")
    
    console.print(f"[green]‚úÖ Longueur s√©lectionn√©e : {length_name}[/green]")
    
    
    # R√©sum√© final
    console.print(Panel.fit(
        f"[bold green]üéØ CONFIGURATION TERMIN√âE[/bold green]\n\n"
        f"[cyan]Destination :[/cyan] {selected_country}\n"
        f"[cyan]Th√®me :[/cyan] {selected_theme}\n"  
        f"[cyan]Paragraphes :[/cyan] {sections}\n"
        f"[cyan]Mode :[/cyan] Standard",
        border_style="green"
    ))
    
    if not Confirm.ask("\n[yellow]Confirmer et commencer la g√©n√©ration ?[/yellow]", default=True):
        console.print("[red]‚ùå G√©n√©ration annul√©e[/red]")
        return None
    
    return {
        "country": selected_country,
        "theme": selected_theme,
        "sections": sections
    }


@click.group()
def cli():
    """
    üéØ LA CHASSE AU TR√âSOR - Adventure Book Generator
    
    Generate interactive adventure books inspired by the 1980s French TV show.
    
    Examples:
      python -m src.main generate -t "Egyptian Mysteries" -s 10
      python -m src.main generate --crew --interactive
      python -m src.main info
    """
    pass


# Commande create supprim√©e - fonctionnalit√© int√©gr√©e dans generate


@cli.command()
@click.option('-t', '--theme', help='Adventure theme (interactive if not specified)')
@click.option('-s', '--sections', type=click.IntRange(1, 200), help='Number of sections (3=quick, 95=standard, 200=max)')
@click.option('-o', '--output', default='output', help='Output directory')
@click.option('-i', '--interactive', is_flag=True, help='Interactive mode for theme selection')
@click.option('-c', '--crew', is_flag=True, help='Use CrewAI multi-agent system (better quality)')
def generate(theme: str, sections: int, output: str, interactive: bool, crew: bool):
    """Generate an adventure book with customizable sections"""
    # Si mode interactif demand√© ou si pas de th√®me fourni, utiliser le questionnaire
    if interactive or not theme:
        adventure_info = collect_adventure_info()
        if not adventure_info:
            return 0
        
        theme = adventure_info['theme']
        sections = adventure_info['sections'] if not sections else sections
        country = adventure_info['country']
    else:
        # Valeurs par d√©faut si non interactif
        if not sections:
            sections = 95
        country = "Destination myst√©rieuse"
    
    # V√©rification et affichage du mode
    if crew and not CREWAI_AVAILABLE:
        console.print("[red]‚ùå Mode CrewAI demand√© mais non disponible[/red]")
        console.print("[yellow]Installez: pip install crewai crewai-tools[/yellow]")
        crew = False
    
    # Affichage du mode en fonction du nombre de sections et du syst√®me
    generation_system = "ü§ñ CrewAI Multi-Agents" if crew else "üîß G√©n√©rateur Simple"
    
    if sections <= 20:
        mode = f"üèÉ MODE COURT ({generation_system})"
        color = "blue" if not crew else "cyan"
        advice = "Livre d'aventure court et dynamique"
    elif sections <= 95:
        mode = f"üìñ MODE STANDARD ({generation_system})"
        color = "green" if not crew else "cyan"
        advice = "Livre d'aventure de taille moyenne"
    else:
        mode = f"üìö MODE GOLDEN BULLETS ({generation_system})"
        color = "cyan"
        advice = "Format officiel avec 95+ paragraphes"
    
    if not interactive and theme:
        console.print(Panel.fit(
            f"[bold {color}]{mode}[/bold {color}]\n"
            f"[white]{advice}[/white]\n"
            f"[yellow]{sections} paragraphes √† g√©n√©rer[/yellow]",
            border_style=color
        ))
    
    # Check API key
    if not os.getenv("OPENAI_API_KEY"):
        console.print("[bold red]‚ùå Erreur: OPENAI_API_KEY non configur√©e[/bold red]")
        console.print("Veuillez configurer votre cl√© API dans le fichier .env")
        return 1
    
    try:
        # Choisir le g√©n√©rateur selon le mode
        if crew and CREWAI_AVAILABLE:
            console.print(f"[cyan]ü§ñ Initialisation du syst√®me CrewAI...[/cyan]")
            generator = ChasseTresorCrewGenerator()
            generation_mode = "CrewAI Multi-Agents"
        else:
            generator = SimpleChasseTresorGenerator()
            generation_mode = "G√©n√©rateur Simple"
        
        # G√©n√©ration selon le type de g√©n√©rateur
        if crew and CREWAI_AVAILABLE:
            # Mode CrewAI : Progress int√©gr√© dans le g√©n√©rateur
            book_data = generator.generate_book(theme, sections)
        else:
            # Mode Simple : Progress externe
            with Progress(
                SpinnerColumn(),
                TextColumn("[progress.description]{task.description}"),
                console=console
            ) as progress:
                task = progress.add_task(f"[green]G√©n√©ration de {sections} sections...", total=None)
                book_data = generator.generate_book(theme, sections)
                progress.update(task, completed=100)
        
        # Sauvegarde commune
        saved_files = generator.save_to_files(book_data, output)
        
        console.print(f"\n[bold green]‚úÖ Livre de {sections} paragraphes g√©n√©r√© ![/bold green]")
        
        # Display results
        table = Table(title="üìö Livre G√©n√©r√©", border_style="green")
        table.add_column("Propri√©t√©", style="cyan")
        table.add_column("Valeur", style="yellow")
        
        table.add_row("Destination", country if 'country' in locals() else "Non sp√©cifi√©e")
        table.add_row("Th√®me", theme)
        table.add_row("Paragraphes", str(sections))
        table.add_row("Mode G√©n√©ration", generation_mode)
        table.add_row("ID", book_data["id"])
        
        for fmt, filepath in saved_files.items():
            table.add_row(f"Fichier {fmt.upper()}", Path(filepath).name)
        
        console.print(table)
        console.print(f"\n[green]üìÅ Fichiers sauvegard√©s dans: {output}/[/green]")
        
    except KeyboardInterrupt:
        console.print(f"\n[yellow]‚èπÔ∏è G√©n√©ration annul√©e par l'utilisateur[/yellow]")
        return 0
    except Exception as e:
        console.print(f"[bold red]‚ùå Erreur: {str(e)}[/bold red]")
        return 1
    
    return 0


# Commande crewai supprim√©e - fonctionnalit√© int√©gr√©e dans generate avec flag --crew


# Commandes de gestion des livres supprim√©es - fonctionnalit√© inutile


@cli.command()
def info():
    """Show system information and configuration"""
    console.print(Panel.fit(
        "[bold cyan]‚ÑπÔ∏è INFORMATIONS SYST√àME[/bold cyan]",
        border_style="cyan"
    ))
    
    table = Table(border_style="cyan")
    table.add_column("Param√®tre", style="cyan")
    table.add_column("Valeur", style="yellow")
    
    # Check environment
    api_key = os.getenv("OPENAI_API_KEY")
    table.add_row("API Key OpenAI", "‚úÖ Configur√©e" if api_key else "‚ùå Non configur√©e")
    table.add_row("Mod√®le", os.getenv("OPENAI_MODEL_NAME", "gpt-4-turbo-preview"))
    table.add_row("Temp√©rature", os.getenv("TEMPERATURE", "0.7"))
    table.add_row("Max Tokens", os.getenv("MAX_TOKENS", "2000"))
    
    # CrewAI settings
    table.add_row("CrewAI Disponible", "‚úÖ Oui" if CREWAI_AVAILABLE else "‚ùå Non (pip install crewai)")
    if CREWAI_AVAILABLE:
        table.add_row("CrewAI Verbose", os.getenv("CREW_VERBOSE", "true"))
        table.add_row("CrewAI Memory", os.getenv("CREW_MEMORY", "true"))
        table.add_row("CrewAI Max Iter", os.getenv("CREW_MAX_ITER", "50"))
    
    # Output settings
    table.add_row("R√©pertoire de sortie", os.getenv("OUTPUT_DIR", "output"))
    
    console.print(table)
    
    # Instructions
    if not api_key:
        console.print("\n[yellow]‚ö†Ô∏è Pour configurer votre cl√© API:[/yellow]")
        console.print("1. Copiez .env.example vers .env")
        console.print("2. Ajoutez votre cl√© OpenAI dans OPENAI_API_KEY")
        console.print("3. Relancez la commande")
    
    if not CREWAI_AVAILABLE:
        console.print("\n[cyan]ü§ñ Pour activer CrewAI (recommand√©):[/cyan]")
        console.print("1. pip install crewai crewai-tools")
        console.print("2. Utilisez: python -m src.main generate --crew")
        console.print("3. Ou ajoutez --crew √† vos commandes")
        console.print("\n[green]‚ú® Avantages CrewAI:[/green]")
        console.print("‚Ä¢ G√©n√©ration 3-5x plus rapide")
        console.print("‚Ä¢ Qualit√© narrative sup√©rieure")
        console.print("‚Ä¢ 6 agents sp√©cialis√©s (Jacques Antoine, Philippe Gildas...)")
        console.print("‚Ä¢ Authenticit√© 'La Chasse au Tr√©sor' garantie")


if __name__ == "__main__":
    cli()