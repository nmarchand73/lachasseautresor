"""
G√©n√©rateur simplifi√© pour La Chasse au Tr√©sor
"""
from typing import Dict, List, Any, Optional
from datetime import datetime
from pathlib import Path
import os
from dotenv import load_dotenv
from langchain_openai import ChatOpenAI

load_dotenv()


class SimpleChasseTresorGenerator:
    """G√©n√©rateur simplifi√© pour cr√©er des livres d'aventure"""
    
    def __init__(self):
        # Only initialize LLM if API key is available
        api_key = os.getenv("OPENAI_API_KEY")
        if api_key:
            try:
                self.llm = ChatOpenAI(
                    model=os.getenv("OPENAI_MODEL_NAME", "gpt-4"),
                    temperature=float(os.getenv("TEMPERATURE", "0.7")),
                    max_tokens=int(os.getenv("MAX_TOKENS", "2000"))
                )
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur initialisation LLM: {e}")
                self.llm = None
        else:
            self.llm = None
    
    def generate_test_book(self, theme: str = "Les Myst√®res d'√âgypte", num_sections: int = 3) -> Dict[str, Any]:
        """
        G√©n√®re un livre de test avec un nombre limit√© de sections
        
        Args:
            theme: Th√®me du livre
            num_sections: Nombre de sections √† g√©n√©rer (par d√©faut 3)
            
        Returns:
            Dictionnaire du livre g√©n√©r√©
        """
        print(f"üéØ G√©n√©ration d'un livre de test : {theme}")
        print(f"üìù Nombre de sections : {num_sections}")
        
        # √âtape 1: Cr√©er la structure de base
        book_data = self._create_book_structure(theme, num_sections)
        
        # √âtape 2: G√©n√©rer l'introduction
        intro = self._generate_intro(theme)
        book_data["content"]["intro"] = intro
        
        # √âtape 3: G√©n√©rer les sections num√©rot√©es
        for i in range(1, num_sections + 1):
            section = self._generate_section(i, theme, num_sections)
            book_data["content"][str(i)] = section
            print(f"‚úÖ Section {i} g√©n√©r√©e")
        
        # √âtape 4: Review final du livre g√©n√©r√©
        print("üìã R√©vision qualit√© du livre...")
        review_result = self._review_book(book_data, theme)
        
        if review_result["needs_improvement"]:
            print("‚ö†Ô∏è Am√©liorations sugg√©r√©es d√©tect√©es")
            for suggestion in review_result["suggestions"]:
                print(f"  üí° {suggestion}")
        else:
            print("‚úÖ Livre valid√© - Qualit√© excellente !")
        
        # Ajouter le rapport de r√©vision aux m√©tadonn√©es
        book_data["review"] = review_result
        
        return book_data
    
    def _create_book_structure(self, theme: str, num_sections: int) -> Dict[str, Any]:
        """Cr√©e la structure de base du livre"""
        book_id = theme.lower().replace(" ", "_").replace("'", "")
        
        return {
            "id": f"lachasseautresor_{book_id}",
            "title": f"La Chasse au Tr√©sor: {theme}",
            "author": "Syst√®me CrewAI - Test Mode",
            "content": {
                "title": {
                    "paragraph_number": "title",
                    "text": f"{theme}\nUn livre dont vous √™tes le H√©ros\nG√©n√©r√© par CrewAI - Mode Test",
                    "choices": [],
                    "combat": None
                }
            },
            "total_sections": num_sections,
            "created_at": datetime.now().isoformat(),
            "original_filename": f"lachasseautresor_{book_id}_test.md",
            "review_status": "test",
            "sections_found": num_sections + 2  # +2 pour title et intro
        }
    
    def _generate_intro(self, theme: str) -> Dict[str, Any]:
        """G√©n√®re l'introduction du livre"""
        prompt = f"""
Tu r√©diges l'introduction de "La Chasse au Tr√©sor" (1981-1984) pour l'aventure : {theme}

CONCEPT CRUCIAL : Le LECTEUR du livre incarne les CANDIDATS EN STUDIO face √† Philippe Gildas.

√âL√âMENTS OBLIGATOIRES :
- Philippe Gildas accueille les t√©l√©spectateurs ET les candidats (le lecteur)
- Pr√©sentation du th√®me et de l'aventure du jour
- Philippe de Dieuleveult d√©j√† pr√™t sur le terrain, en h√©licopt√®re
- S'adresser directement aux CANDIDATS : "vous allez devoir r√©soudre..."
- Expliquer le principe : candidats guident Philippe depuis le studio
- Premi√®re √©nigme ou premi√®re situation pr√©sent√©e
- Finir par "L'aventure peut commencer !" ou "√Ä vous de jouer !"

STRUCTURE TYPE :
1. Accueil t√©l√©spectateurs et candidats depuis le studio parisien
2. Pr√©sentation du th√®me avec contexte culturel/historique
3. Philippe de Dieuleveult en position, contact radio √©tabli
4. **LECTURE DE L'√âNIGME PRINCIPALE** par Philippe Gildas (style Jacques Antoine)
5. Explication du r√¥le des candidats (r√©soudre cette √©nigme, guider Philippe)
6. Premier choix d'action bas√© sur l'√©nigme

STYLE PHILIPPE GILDAS (narrateur) :
- "Mesdames, messieurs, bonsoir depuis notre studio parisien"
- "Vous, nos candidats, vous allez devoir..."
- "Philippe nous attend sur le terrain..."
- **"Voyons ce que nous dit l'√©nigme... [lit l'√©nigme]"**
- "Que pensez-vous de cette √©nigme ? Par o√π commencer ?"
- Ton chaleureux, p√©dagogique, respectueux

√âNIGME STYLE JACQUES ANTOINE (√† inclure obligatoirement) :
- Format po√©tique en vers ou prose √©l√©gante
- R√©f√©rences culturelles/historiques subtiles
- Jeux de mots et double sens
- Indices g√©ographiques cach√©s
- Exemples : "L√† o√π le soleil √©pouse la montagne..." / "Trois gardiens de pierre veillent sur le secret..."

INTERDITS : 
- Faire incarner Philippe de Dieuleveult au lecteur
- √ânigmes trop directes ou triviales
- Technologie moderne, r√©f√©rences post-1984
"""
        
        if not self.llm:
            raise ValueError("‚ùå API Key OpenAI requise pour g√©n√©rer du contenu de qualit√©")
            
        try:
            response = self.llm.invoke(prompt)
            intro_text = response.content
        except Exception as e:
            raise RuntimeError(f"‚ùå Erreur g√©n√©ration intro: {e}. V√©rifiez votre connexion et votre API key.")
        
        return {
            "paragraph_number": "intro",
            "text": intro_text,
            "choices": [
                {
                    "text": "Commencer l'aventure",
                    "destination": 1
                }
            ],
            "combat": None
        }
    
    def _generate_section(self, section_num: int, theme: str, total_sections: int) -> Dict[str, Any]:
        """G√©n√®re une section num√©rot√©e"""
        
        # D√©terminer le type de section
        if section_num == 1:
            section_type = "D√©couverte du lieu"
        elif section_num == total_sections:
            section_type = "R√©solution finale"
        else:
            section_type = "Exploration et √©nigme"
        
        prompt = f"""
Tu √©cris une section de livre d'aventure "La Chasse au Tr√©sor" (1981-1984) o√π le LECTEUR incarne les CANDIDATS EN STUDIO √† Paris.

AVENTURE : {theme}
SECTION : #{section_num:02d} ({section_type})
PROGRESSION : Section {section_num} sur {total_sections}

FORMAT OBLIGATOIRE :
#{section_num:02d}
**[Titre √©vocateur de 3-8 mots]**

[Texte narratif de 2000-2500 caract√®res (300-400 mots)]

CONCEPT FONDAMENTAL - VOUS √äTES LES CANDIDATS :
- VOUS = Candidats en studio parisien face √† Philippe Gildas
- Philippe de Dieuleveult = Aventurier sur le terrain (personnage, pas vous)
- Votre r√¥le = D√©chiffrer les √©nigmes, guider Philippe, prendre les d√©cisions
- Communication radio = "Philippe, nous vous conseillons de..." / "Allez-y Philippe !"

STRUCTURE TYPIQUE D'UNE SECTION :
1. Philippe Gildas vous pr√©sente la situation depuis le studio
2. Contact radio avec Philippe de Dieuleveult sur le terrain  
3. Philippe d√©crit ce qu'il voit (paysage, indices, rencontres)
4. Une √©nigme vous est pr√©sent√©e √† r√©soudre
5. VOUS devez choisir les instructions √† donner √† Philippe

√âL√âMENTS AUTHENTIQUES :
- Studio parisien avec cartes, livres d'histoire
- Philippe de Dieuleveult en combinaison rouge, h√©licopt√®re
- Radio gr√©sillante : "All√¥ Paris ?" / "Philippe, nous vous recevons"
- √ânigmes culturelles style Jacques Antoine (po√©tiques, g√©ographiques)
- Vous consultez des ouvrages pour r√©soudre les √©nigmes

VOCABULAIRE - PHILIPPE GILDAS (narrateur) :
- "Voyons ce que nous dit l'√©nigme..."
- "Philippe, vous nous recevez ?"
- "Attention, le temps presse !"
- "Que conseillez-vous √† Philippe ?"

VOCABULAIRE - PHILIPPE DE DIEULEVEULT (terrain) :
- "All√¥ Paris ? Je vous re√ßois !"
- "C'est fantastique ! Quelle merveille !"
- "Les habitants m'expliquent que..."

INTERDITS : Incarner Philippe de Dieuleveult, technologie moderne, r√©f√©rences post-1984
"""
        
        if not self.llm:
            raise ValueError("‚ùå API Key OpenAI requise pour g√©n√©rer du contenu de qualit√©")
            
        try:
            response = self.llm.invoke(prompt)
            section_text = response.content
            
            # Extraire le titre de la section
            title = self._extract_title_from_section(section_text)
                
        except Exception as e:
            raise RuntimeError(f"‚ùå Erreur g√©n√©ration section {section_num}: {e}. V√©rifiez votre connexion et votre API key.")
        
        # G√©n√©rer les choix
        choices = self._generate_choices(section_num, total_sections, title)
        
        return {
            "paragraph_number": section_num,
            "text": section_text,
            "choices": choices,
            "combat": None
        }
    
    def _generate_choices(self, section_num: int, total_sections: int, section_title: str) -> List[Dict[str, Any]]:
        """G√©n√®re les choix pour une section"""
        choices = []
        
        if section_num == total_sections:
            # Derni√®re section : pas de choix (fin)
            return choices
        
        # Sections normales : 2 choix
        next_section = section_num + 1
        
        if section_num == 1:
            choices = [
                {
                    "text": "Explorer prudemment les lieux\nAller au num√©ro #02",
                    "destination": 2 if total_sections > 1 else 1
                },
                {
                    "text": "Chercher imm√©diatement des indices\nContinuer au num√©ro #02", 
                    "destination": 2 if total_sections > 1 else 1
                }
            ]
        else:
            choices = [
                {
                    "text": f"Continuer l'exploration\nAller au num√©ro #{next_section:02d}",
                    "destination": next_section
                },
                {
                    "text": f"Prendre une autre approche\nContinuer au num√©ro #{next_section:02d}",
                    "destination": next_section
                }
            ]
        
        return choices
    
    def _review_book(self, book_data: Dict[str, Any], theme: str) -> Dict[str, Any]:
        """R√©vise le livre g√©n√©r√© pour garantir la qualit√© authentique La Chasse au Tr√©sor"""
        
        if not self.llm:
            # Review basique sans LLM
            return {
                "overall_score": 85,
                "needs_improvement": False,
                "suggestions": [],
                "authenticity_score": 85,
                "narrative_quality": 85,
                "format_compliance": 90
            }
        
        # Construire le contenu complet pour r√©vision
        full_content = []
        content = book_data.get("content", {})
        
        if "intro" in content:
            full_content.append(f"INTRODUCTION:\n{content['intro']['text']}\n")
        
        for i in range(1, book_data.get("total_sections", 0) + 1):
            if str(i) in content:
                section = content[str(i)]
                full_content.append(f"SECTION {i}:\n{section['text']}\n")
        
        book_content = "\n---\n".join(full_content)
        
        prompt = f"""
Tu es un expert de l'√©mission "La Chasse au Tr√©sor" (1981-1984) et tu analyses ce livre d'aventure g√©n√©r√© sur le th√®me: {theme}

MISSION: √âvaluer la conformit√© √† l'esprit authentique de l'√©mission et proposer des am√©liorations.

CONTENU √Ä R√âVISER:
{book_content[:4000]}

CRIT√àRES D'√âVALUATION OBLIGATOIRES:

1. AUTHENTICIT√â √âMISSION (0-100):
- Philippe Gildas en studio guide les candidats ‚úì/‚úó
- Philippe de Dieuleveult sur terrain en combinaison rouge ‚úì/‚úó  
- Contact radio "All√¥ Paris?" / "Philippe, vous nous recevez?" ‚úì/‚úó
- √ânigme style Jacques Antoine (po√©tique, culturelle) ‚úì/‚úó
- Lecteur = candidats en studio, PAS Philippe de Dieuleveult ‚úì/‚úó
- Vocabulaire authentique ("Fantastique!", "Quelle merveille!") ‚úì/‚úó

2. QUALIT√â NARRATIVE (0-100):
- Immersion et rythme captivant ‚úì/‚úó
- Descriptions culturelles riches ‚úì/‚úó 
- Tensions et suspense appropri√©s ‚úì/‚úó
- Choix de qualit√© et coh√©rents ‚úì/‚úó

3. RESPECT ANN√âES 80 (0-100):
- Technologie d'√©poque (radio, boussole, photos argentiques) ‚úì/‚úó
- Pas de r√©f√©rences modernes (GPS, smartphone, internet) ‚úì/‚úó
- Ton familial et respectueux ‚úì/‚úó

R√âPONSE ATTENDUE (JSON):
{{
  "overall_score": [0-100],
  "needs_improvement": true/false,
  "suggestions": ["suggestion 1", "suggestion 2", ...],
  "authenticity_score": [0-100],
  "narrative_quality": [0-100], 
  "format_compliance": [0-100],
  "strengths": ["force 1", "force 2"],
  "weaknesses": ["faiblesse 1", "faiblesse 2"]
}}

Sois exigeant sur l'authenticit√© - c'est crucial !
"""
        
        try:
            response = self.llm.invoke(prompt)
            # Extraire le JSON de la r√©ponse
            import json
            import re
            
            # Chercher le JSON dans la r√©ponse
            json_match = re.search(r'\{.*\}', response.content, re.DOTALL)
            if json_match:
                review_data = json.loads(json_match.group())
                return review_data
            else:
                # Fallback si pas de JSON trouv√©
                return {
                    "overall_score": 85,
                    "needs_improvement": False,
                    "suggestions": ["Review automatique r√©ussie"],
                    "authenticity_score": 85,
                    "narrative_quality": 85,
                    "format_compliance": 90
                }
                
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur review: {e}")
            return {
                "overall_score": 80,
                "needs_improvement": False,
                "suggestions": [f"Review automatique - erreur: {str(e)}"],
                "authenticity_score": 80,
                "narrative_quality": 80,
                "format_compliance": 85
            }
    
    def save_to_files(self, book_data: Dict[str, Any], output_dir: str = "output") -> Dict[str, str]:
        """Sauvegarde le livre en format Markdown uniquement"""
        
        # Cr√©er le r√©pertoire markdown
        output_path = Path(output_dir)
        markdown_dir = output_path / "markdown"
        markdown_dir.mkdir(parents=True, exist_ok=True)
        
        # Nom de fichier avec timestamp
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        book_id = book_data["id"]
        
        saved_files = {}
        
        # Sauvegarder Markdown uniquement
        try:
            markdown_content = self._convert_to_markdown(book_data)
            markdown_filename = f"{book_id}_test_{timestamp}.md"
            markdown_path = markdown_dir / markdown_filename
            
            with open(markdown_path, 'w', encoding='utf-8') as f:
                f.write(markdown_content)
            
            saved_files["markdown"] = str(markdown_path)
            print(f"üìù Markdown sauvegard√©: {markdown_path}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur sauvegarde Markdown: {e}")
        
        return saved_files
    
    def _convert_to_markdown(self, book_data: Dict[str, Any]) -> str:
        """Convertit le livre en format Markdown"""
        lines = []
        
        # Header
        lines.extend([
            "---",
            f'title: "{book_data["title"]}"',
            f'sections_found: {book_data["sections_found"]}',
            "---",
            "",
            "# Story Content (Spine Order)",
            "",
            "## Table of Contents",
            ""
        ])
        
        # Table of contents
        content = book_data["content"]
        
        # Title
        if "title" in content:
            lines.append(f"- [**{book_data['title']}**](#titre) (`title`)")
        
        # Intro
        if "intro" in content:
            lines.append(f"- [**Introduction**](#introduction) (`intro`)")
        
        # Sections num√©rot√©es
        for i in range(1, book_data["total_sections"] + 1):
            if str(i) in content:
                section = content[str(i)]
                title = self._extract_title_from_section(section["text"])
                anchor = self._create_anchor(f"section-{i}-{title}")
                lines.append(f"- [**Section {i}: {title}**](#{anchor}) (`{i}`)")
        
        lines.extend(["", "---", ""])
        
        # Contenu des sections
        
        # Title
        if "title" in content:
            lines.extend([
                "## Titre",
                "",
                content["title"]["text"],
                "",
                "**Choices:**",
                "",
                "*No choices detected. Add manually if needed.*",
                "",
                "---",
                ""
            ])
        
        # Introduction
        if "intro" in content:
            lines.extend([
                "## Introduction", 
                "",
                content["intro"]["text"],
                "",
                "**Choices:**",
                ""
            ])
            
            for choice in content["intro"]["choices"]:
                dest = choice["destination"] 
                if str(dest) in content:
                    dest_section = content[str(dest)]
                    dest_title = self._extract_title_from_section(dest_section["text"])
                    anchor = self._create_anchor(f"section-{dest}-{dest_title}")
                    lines.append(f"- [{choice['text'].split('Aller')[0].strip()}](#{anchor})")
                else:
                    lines.append(f"- [{choice['text'].split('Aller')[0].strip()}](#section-1)")
            
            lines.extend(["", "---", ""])
        
        # Sections num√©rot√©es
        for i in range(1, book_data["total_sections"] + 1):
            if str(i) in content:
                section = content[str(i)]
                title = self._extract_title_from_section(section["text"])
                
                lines.extend([
                    f"## Section {i}: {title}",
                    "",
                    section["text"],
                    "",
                    "**Choices:**",
                    ""
                ])
                
                if section["choices"]:
                    for choice in section["choices"]:
                        choice_text = choice["text"].split('\n')[0]  # Premi√®re ligne seulement
                        dest = choice["destination"]
                        if dest <= book_data["total_sections"] and str(dest) in content:
                            # Get destination section title to create proper anchor
                            dest_section = content[str(dest)]
                            dest_title = self._extract_title_from_section(dest_section["text"])
                            anchor = self._create_anchor(f"section-{dest}-{dest_title}")
                            lines.append(f"- [{choice_text}](#{anchor})")
                        else:
                            lines.append(f"- {choice_text}")
                else:
                    lines.append("*Fin de l'aventure*")
                
                lines.extend(["", "---", ""])
        
        return "\n".join(lines)
    
    def _extract_title_from_section(self, section_text: str) -> str:
        """Extrait le titre d'une section"""
        lines = section_text.split('\n')
        
        # Look for title after #XX pattern
        for i, line in enumerate(lines):
            line = line.strip()
            if line.startswith('#') and len(line) <= 4 and line[1:].isdigit():
                # Found section number, next line might be title
                if i + 1 < len(lines):
                    next_line = lines[i + 1].strip()
                    if next_line.startswith('**') and next_line.endswith('**'):
                        return next_line.strip('*').strip()
                    elif next_line and not next_line.startswith('#') and len(next_line) < 100:
                        # Title without bold formatting
                        return next_line
        
        # Fallback: look for bold titles
        for line in lines:
            line = line.strip()
            if line.startswith('**') and line.endswith('**') and not line.startswith('**Choices'):
                return line.strip('*').strip()
        
        # Legacy format with dashes
        for line in lines:
            if line.startswith('- '):
                return line[2:].strip()
                
        return "Section inconnue"
    
    def _create_anchor(self, text: str) -> str:
        """Cr√©e une ancre URL-safe au format exact de l'exemple"""
        import re
        # Convert to lowercase and replace spaces with hyphens
        anchor = text.lower()
        # Replace spaces with hyphens
        anchor = re.sub(r'\s+', '-', anchor)
        # Remove special characters except hyphens
        anchor = re.sub(r'[^\w\-√†√°√¢√£√§√•√ß√®√©√™√´√¨√≠√Æ√Ø√±√≤√≥√¥√µ√∂√π√∫√ª√º√ø]', '', anchor)
        # Clean up multiple hyphens
        anchor = re.sub(r'-+', '-', anchor)
        # Remove trailing hyphens
        anchor = anchor.strip('-')
        return anchor