#!/usr/bin/env python3
"""
Test des imports pour v√©rifier que le syst√®me fonctionne
"""

import sys
from pathlib import Path

def test_basic_imports():
    """Test des imports de base"""
    print("üîç Test des imports de base...")
    
    try:
        # Add src to path
        sys.path.insert(0, str(Path(__file__).parent / "src"))
        
        # Test dotenv
        from dotenv import load_dotenv
        print("‚úÖ dotenv OK")
        
        # Test pathlib
        from pathlib import Path
        print("‚úÖ pathlib OK")
        
        # Test json
        import json
        print("‚úÖ json OK")
        
        # Test datetime
        from datetime import datetime
        print("‚úÖ datetime OK")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Erreur import de base: {e}")
        return False

def test_optional_imports():
    """Test des imports optionnels"""
    print("\nüîç Test des imports optionnels...")
    
    success = True
    
    # Test OpenAI
    try:
        from langchain_openai import ChatOpenAI
        print("‚úÖ langchain_openai OK")
    except ImportError as e:
        print(f"‚ö†Ô∏è langchain_openai manquant: {e}")
        success = False
    
    # Test rich
    try:
        from rich.console import Console
        print("‚úÖ rich OK")
    except ImportError as e:
        print(f"‚ö†Ô∏è rich manquant: {e}")
        success = False
    
    # Test click
    try:
        import click
        print("‚úÖ click OK")
    except ImportError as e:
        print(f"‚ö†Ô∏è click manquant: {e}")
        success = False
    
    return success

def test_project_imports():
    """Test des imports du projet"""
    print("\nüîç Test des imports du projet...")
    
    try:
        # Add src to path
        sys.path.insert(0, str(Path(__file__).parent / "src"))
        
        # Test simple generator
        from src.simple_generator import SimpleChasseTresorGenerator
        print("‚úÖ SimpleChasseTresorGenerator OK")
        
        # Test que le g√©n√©rateur peut s'initialiser
        generator = SimpleChasseTresorGenerator()
        print("‚úÖ Initialisation g√©n√©rateur OK")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur imports projet: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_minimal_generation():
    """Test de g√©n√©ration minimale sans API"""
    print("\nüîç Test g√©n√©ration minimale...")
    
    try:
        sys.path.insert(0, str(Path(__file__).parent / "src"))
        
        from src.simple_generator import SimpleChasseTresorGenerator
        
        # Test sans API key
        import os
        if "OPENAI_API_KEY" in os.environ:
            del os.environ["OPENAI_API_KEY"]
        
        generator = SimpleChasseTresorGenerator()
        
        # Test structure de base
        book_data = generator._create_book_structure("Test Theme", 2)
        assert "id" in book_data
        assert "title" in book_data
        assert "content" in book_data
        print("‚úÖ Structure de base OK")
        
        # Test intro fallback
        intro = generator._get_fallback_intro("Test Theme")
        assert len(intro) > 100
        print("‚úÖ Intro fallback OK")
        
        # Test section fallback
        section_text, title = generator._get_fallback_section(1, "Test Theme")
        assert len(section_text) > 100
        assert len(title) > 0
        print("‚úÖ Section fallback OK")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©ration minimale: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üß™ TEST DES IMPORTS ET FONCTIONNALIT√â DE BASE")
    print("=" * 60)
    
    tests = [
        ("Imports de base", test_basic_imports),
        ("Imports optionnels", test_optional_imports), 
        ("Imports du projet", test_project_imports),
        ("G√©n√©ration minimale", test_minimal_generation)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\n{'='*20} {test_name} {'='*20}")
        if test_func():
            passed += 1
            print(f"‚úÖ {test_name} : R√âUSSI")
        else:
            print(f"‚ùå {test_name} : √âCHOU√â")
    
    print("\n" + "="*60)
    print(f"üìä R√©sultats finaux: {passed}/{total} tests r√©ussis")
    
    if passed == total:
        print("üéâ Tous les tests sont pass√©s ! Le syst√®me est pr√™t.")
        sys.exit(0)
    elif passed >= total - 1:
        print("‚ö†Ô∏è  Presque tous les tests passent. V√©rifiez les d√©pendances optionnelles.")
        sys.exit(0)
    else:
        print("‚ùå Plusieurs tests √©chouent. V√©rifiez l'installation.")
        sys.exit(1)